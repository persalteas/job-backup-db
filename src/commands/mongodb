#!/usr/bin/env bash

set -e
set +o pipefail
. "$BAGCLI_WORKDIR/common"

cli_help_deploy() {
  echo "
Command: mongodb
Usage:
  mongodb"
  exit 1
}

export MONGODB_HOST=$BAGCLI_DATABASE_HOST
export MONGODB_USER=$BAGCLI_DATABASE_USER
export MONGODB_PASSWORD=$BAGCLI_DATABASE_PASS
export MONGODB_PORT=$BAGCLI_DATABASE_PORT
export MONGODB_DB=$BAGCLI_DATABASE_NAME
export MONGODB_URI=$BAGCLI_DATABASE_URI

cli_log "Backup mongoDB database with user $MONGODB_USER BEGIN"

cli_log "ENV variables"
env | grep "BAGCLI_*" | grep -v "PASS"

mongoDump() {
  cli_log "Executing mongodump"
  mongodump --uri="$MONGODB_URI" --gzip --archive=/tmp/mongodump.gz
  return "${PIPESTATUS[0]}"
}

removeOldBackup() {
  cli_log "Removing backups older than $BAGCLI_RETENTION_TIME"
  rclone_delete --min-age "$BAGCLI_RETENTION_TIME" backup:"$BAGCLI_REMOTE_PATH"/ || true
}

copyToS3() {
  cli_log "Copy of local dump to remote"
  rclone_cp /tmp/mongodump.gz backup:"$BAGCLI_REMOTE_PATH"/mongodump_"${BAGCLI_DATABASE_NAME}"_"$(date +'%d_%m_%Y__%H_%M_%S')".sqlc.dump
  return "${PIPESTATUS[0]}"
}

clearTmpFolder() {
  cli_log "Cleaning /tmp folder"
  rm -rf /tmp/mongodump.gz
}

checkSucceed() {
  if [ $? -gt 0 ]; then
    cli_log "[KO] $?"
    exit "$1"
  fi
}

main(){
  mongoDump
  checkSucceed "mysqldump failed"

  removeOldBackup
  checkSucceed "removing old backups failed"

  copyToS3
  checkSucceed "copying to the s3 bucket failed"

  clearTmpFolder
  checkSucceed "cleaning temporary folder failed"

  heartbeatPing
  cli_log "job succeed"

  postToWebhook
  cli_log "post to WebHook succeed"
}

main